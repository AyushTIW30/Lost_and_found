# Lost & Found â€” Django Starter

Brooo â€” maine ek simple, ready-to-run **Django starter** bana diya hai for your Lost & Found project. Yeh lightweight starter aapko jaldi se local pe run karne layak backend + basic templates dega, with automatic fuzzy matching between "lost" and "found" reports.

> **What you'll get:**
>
> * Django app `core` with models, forms, views, and templates
> * SQLite database (Django default)
> * Simple matching using Python's `difflib` (no extra pip libs needed)
> * Admin support to mark items `returned`

---

## Project structure

```
lost_and_found/            # Django project root
â”œâ”€ manage.py
â”œâ”€ lost_and_found/         # Django project settings
â”‚  â”œâ”€ settings.py (snippet below)
â”‚  â”œâ”€ urls.py
â”‚  â””â”€ wsgi.py
â””â”€ core/                   # app
   â”œâ”€ migrations/
   â”œâ”€ templates/core/
   â”‚  â”œâ”€ base.html
   â”‚  â”œâ”€ index.html
   â”‚  â”œâ”€ report_form.html
   â”‚  â””â”€ list.html
   â”œâ”€ admin.py
   â”œâ”€ apps.py
   â”œâ”€ forms.py
   â”œâ”€ models.py
   â”œâ”€ urls.py
   â””â”€ views.py
```

---

## Quick setup (commands)

```bash
python -m venv venv
source venv/bin/activate      # on Windows: venv\Scripts\activate
pip install django
# create project
django-admin startproject lost_and_found .
python manage.py startapp core
# add 'core' to INSTALLED_APPS in settings.py
# then create files as below
python manage.py makemigrations
python manage.py migrate
python manage.py createsuperuser
python manage.py runserver
```

Open [http://127.0.0.1:8000/](http://127.0.0.1:8000/) after running server.

---

## `lost_and_found/settings.py` (important snippets)

Add `core` and static/template dirs if not present:

```python
# inside INSTALLED_APPS
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',
]

# Templates & static defaults are fine for a quick start.
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'
```

Also in `urls.py` (project-level) add media serve in dev and include core urls:

```python
from django.contrib import admin
from django.urls import path, include
from django.conf import settings
from django.conf.urls.static import static

urlpatterns = [
    path('admin/', admin.site.urls),
    path('', include('core.urls')),
]

if settings.DEBUG:
    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)
```

---

## `core/models.py`

```python
from django.db import models
from django.contrib.auth.models import User

class Item(models.Model):
    STATUS_CHOICES = (
        ('lost', 'Lost'),
        ('found', 'Found'),
    )
    title = models.CharField(max_length=200)
    description = models.TextField(blank=True)
    status = models.CharField(max_length=10, choices=STATUS_CHOICES)
    date = models.DateField()
    location = models.CharField(max_length=200, blank=True)
    contact = models.CharField(max_length=200, blank=True)
    photo = models.ImageField(upload_to='items/', blank=True, null=True)
    claimed = models.BooleanField(default=False)
    created_by = models.ForeignKey(User, on_delete=models.SET_NULL, null=True, blank=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"{self.title} ({self.status})"
```

---

## `core/forms.py`

```python
from django import forms
from .models import Item

class ItemForm(forms.ModelForm):
    class Meta:
        model = Item
        fields = ['title', 'description', 'status', 'date', 'location', 'contact', 'photo']
        widgets = {
            'date': forms.DateInput(attrs={'type': 'date'})
        }
```

---

## `core/admin.py`

```python
from django.contrib import admin
from .models import Item

@admin.register(Item)
class ItemAdmin(admin.ModelAdmin):
    list_display = ('title', 'status', 'date', 'location', 'claimed')
    list_filter = ('status', 'claimed')
    search_fields = ('title', 'description', 'location', 'contact')
```

---

## `core/urls.py`

```python
from django.urls import path
from . import views

app_name = 'core'

urlpatterns = [
    path('', views.index, name='index'),
    path('report/', views.report_item, name='report_item'),
    path('items/', views.item_list, name='item_list'),
    path('item/<int:pk>/', views.item_detail, name='item_detail'),
]
```

---

## `core/views.py` (matching logic included)

```python
from django.shortcuts import render, redirect, get_object_or_404
from .models import Item
from .forms import ItemForm
from difflib import SequenceMatcher
from django.core.mail import send_mail
from django.conf import settings

# simple similarity function using difflib
def similarity(a, b):
    return SequenceMatcher(None, a, b).ratio()


def index(request):
    recent = Item.objects.order_by('-created_at')[:8]
    return render(request, 'core/index.html', {'recent': recent})


def report_item(request):
    if request.method == 'POST':
        form = ItemForm(request.POST, request.FILES)
        if form.is_valid():
            item = form.save(commit=False)
            if request.user.is_authenticated:
                item.created_by = request.user
            item.save()
            # run matching: if user reported lost, search found items and vice versa
            counterpart_status = 'found' if item.status == 'lost' else 'lost'
            candidates = Item.objects.filter(status=counterpart_status, claimed=False)
            matches = []
            for c in candidates:
                score_title = similarity(item.title.lower(), c.title.lower())
                score_desc = similarity(item.description.lower(), c.description.lower()) if item.description and c.description else 0
                score_loc = similarity(item.location.lower(), c.location.lower()) if item.location and c.location else 0
                total = (score_title * 0.6) + (score_desc * 0.3) + (score_loc * 0.1)
                if total > 0.55:  # threshold, tweak as needed
                    matches.append((c, total))
            # if matches, you could send emails â€” basic example (requires email settings)
            if matches:
                # notify admin + both users (if contact info exists)
                # This example only prints â€” replace send_mail with configured email backend
                for m, score in matches[:5]:
                    print(f"Possible match: {m} (score {score:.2f})")
                    # Example: send_mail(...)
            return redirect('core:item_list')
    else:
        form = ItemForm()
    return render(request, 'core/report_form.html', {'form': form})


def item_list(request):
    q = request.GET.get('q')
    items = Item.objects.all().order_by('-created_at')
    if q:
        items = items.filter(title__icontains=q) | items.filter(description__icontains=q)
    return render(request, 'core/list.html', {'items': items})


def item_detail(request, pk):
    item = get_object_or_404(Item, pk=pk)
    return render(request, 'core/detail.html', {'item': item})
```

---

## Templates (minimal)

### `templates/core/base.html`

```html
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Lost & Found</title>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/water.css@2/out/water.css">
</head>
<body>
  <header>
    <h1><a href="/">Lost & Found</a></h1>
    <nav><a href="/report/">Report</a> | <a href="/items/">Browse</a> | <a href="/admin/">Admin</a></nav>
    <hr>
  </header>
  <main>
    {% block content %}{% endblock %}
  </main>
</body>
</html>
```

### `templates/core/index.html`

```html
{% extends 'core/base.html' %}
{% block content %}
<h2>Recent Reports</h2>
<ul>
  {% for it in recent %}
    <li>{{ it.title }} â€” {{ it.status }} ({{ it.date }})</li>
  {% empty %}
    <li>No reports yet.</li>
  {% endfor %}
</ul>
{% endblock %}
```

### `templates/core/report_form.html`

```html
{% extends 'core/base.html' %}
{% block content %}
<h2>Report Lost or Found Item</h2>
<form method="post" enctype="multipart/form-data">
  {% csrf_token %}
  {{ form.as_p }}
  <button type="submit">Submit</button>
</form>
{% endblock %}
```

### `templates/core/list.html`

```html
{% extends 'core/base.html' %}
{% block content %}
<h2>All Reports</h2>
<form method="get"><input name="q" placeholder="Search" value="{{ request.GET.q }}"><button>Search</button></form>
<ul>
  {% for it in items %}
    <li><a href="/item/{{ it.pk }}/">{{ it.title }}</a> â€” {{ it.status }} â€” {{ it.location }}</li>
  {% empty %}
    <li>No reports.</li>
  {% endfor %}
</ul>
{% endblock %}
```

---

## Notes, tweaks & next steps

* The matching threshold (`0.55`) and weighting are basic â€” tune them or replace with NLP embeddings for better accuracy.
* To send real emails, configure `EMAIL_BACKEND` and call `send_mail()` where commented.
* For production, move media to Cloudinary/Firebase and enable authentication flows.
* Add pagination, user profiles, and an admin verification workflow.

---

If you want, I can now:

1. **Generate the same project but with Node.js + Express + MongoDB** (if you prefer JS).
2. **Turn this into a React + Django fullstack starter** (with API endpoints and React frontend).
3. **Create GitHub-ready files** (Iâ€™ll push content into files here).

Tell me which one you want next and Iâ€™ll drop the code. ðŸ™Œ
